[target.'cfg(not(target_os = "emscripten"))']
rustflags = [
    "-C", "link-arg=-lc++",
    "-C", "link-arg=-lc++abi",
]
[target.wasm32-unknown-emscripten]
rustflags = [
    # This provides the DtlnPlugin wrapper to match our NEON module interface.
    "-C", "link-args=--post-js ./dtln_post.js",
    "-C", "link-args=--pre-js ./dtln_pre.js",
    "-C", "link-args=-s SINGLE_FILE=1 -s ENVIRONMENT=\"web,worker\"",
    "-C", "link-args=-msimd128 -msse",

    "-C", "target-feature=+simd128",


    # This allows cdylib to be built, which doesn't have a main symbol.
    "-C", "link-args=--no-entry",
    # We want to enable these eventually, but we can't while cxx.o is being
    # built without the needed flags: https://github.com/dtolnay/cxx/issues/1101
    # Since the .a files we are linking to have SIMD enabled, it appears we are
    # getting SIMD acceleration for TFlite. binaryen wasm-opt however complains
    # and we can't optimize the resulting wasm because it detects the SIMD
    # instructions.
    #
    # If we happen to get cxx to build with atomics, bulk memory, and simd128,
    # the following flags will enable it for the rest of the project:
    #
    # "-C", "link-args=-msimd128 -pthread",
    # "-C", "target-feature=+simd128,+atomics,+bulk-memory",
]
